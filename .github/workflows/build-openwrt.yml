#
# Copyright (C) 2019-2021 P3TERX <https://p3terx.com>
# Copyright (C) 2022-2024 jellybean13
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/jellybean13/Actions-OpenWrt
# File: ".github/workflows/build-openwrt.yml"
# Description: Make custom OpenWrt builds using GitHub Actions.
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  # A file containing custom feeds.
  # DO NOT MODIFY unless the target file has been moved, renamed or removed.
  FEEDS_CONF_FILE: feeds.conf.default
  # A directory containing "apply custom overlay" feature.
  # DO NOT MODIFY unless the target directory has been moved, renamed or removed.
  OVERLAY_DIR: overlay
  # A directory containing "apply custom patches" feature.
  # DO NOT MODIFY unless the target directory has been moved, renamed or removed.
  PATCHES_DIR: patches

  # Remote repository of OpenWrt.
  # Default: https://git.openwrt.org/openwrt/openwrt.git
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  # Branch/Tag of the remote repository.
  # Default: openwrt-23.05
  REPO_BRANCH: openwrt-23.05
  # The timezone of the building environment.
  # Default: Asia/Shanghai
  BUILDING_ENV_TIMEZONE: Asia/Shanghai
  # Upload OpenWrt firmware artifact.
  # Default: true
  UPLOAD_FIRMWARE_ARTIFACT: true
  # Upload OpenWrt packages (ipk) artifact.
  # Default: true
  UPLOAD_PACKAGES_ARTIFACT: true
  # Whether to upload custom firmware to CowTransfer.
  # Default: false
  UPLOAD_TO_COWTRANSFER: false
  # Whether to upload custom firmware to WeTransfer.
  # Default: false
  UPLOAD_TO_WETRANSFER: false
  # Whether to upload custom firmware to GitHub releases.
  # Default: true
  UPLOAD_TO_GITHUB_RELEASES: true
  # The number of maximum item that Workflow runs and GitHub releases preserve.
  # Default: 3
  MAXIMUM_NUMBER_OF_PRESERVED_ITEMS: 3

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      if: (!cancelled())
      uses: actions/checkout@v4

    - name: Initialize building environment
      id: initialize_environment
      if: (!cancelled())
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "${BUILDING_ENV_TIMEZONE}"
        sudo -E apt update
        sudo -E apt install -y build-essential gawk gcc-multilib flex git \
                               gettext libncurses5-dev libssl-dev \
                               python3-distutils qemu-utils zlib1g-dev
        sudo -E apt autoremove --purge -y
        sudo -E apt clean -y
        sudo mkdir -p "/workdir"
        sudo chown "${USER}:${GROUPS}" "/workdir"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check storage usage
      if: steps.initialize_environment.outputs.status == 'success' && !cancelled()
      run: df -hT

    - name: Clone source code
      id: clone_source_code
      if: steps.initialize_environment.outputs.status == 'success' && !cancelled()
      working-directory: /workdir
      run: |
        git clone "${REPO_URL}" -b "${REPO_BRANCH}" "openwrt"
        ln -sf "/workdir/openwrt" "${GITHUB_WORKSPACE}/openwrt"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Apply custom feeds
      id: apply_custom_feeds
      if: steps.clone_source_code.outputs.status == 'success' && !cancelled()
      run: |
        if [ -e "${GITHUB_WORKSPACE}/${OVERLAY_DIR}/${FEEDS_CONF_FILE}" ]; then
            mv -v "${GITHUB_WORKSPACE}/${OVERLAY_DIR}/${FEEDS_CONF_FILE}" "openwrt/${FEEDS_CONF_FILE}"
        else
            echo "No custom feeds, using default feeds."
        fi
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Update the feeds
      id: update_feeds
      if: steps.apply_custom_feeds.outputs.status == 'success' && !cancelled()
      run: |
        cd "openwrt"
        "./scripts/feeds" update -a
        "./scripts/feeds" install -a
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Apply custom overlay
      id: apply_custom_overlay
      if: steps.update_feeds.outputs.status == 'success' && !cancelled()
      run: |
        if [ -d "${GITHUB_WORKSPACE}/${OVERLAY_DIR}" ]; then
            cp -rfv "${GITHUB_WORKSPACE}/${OVERLAY_DIR}/." "openwrt"
        else
            echo "No custom overlay, using default source code."
        fi
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Apply custom patches
      id: apply_custom_patches
      if: steps.apply_custom_overlay.outputs.status == 'success' && !cancelled()
      run: |
        PATCHES_FILE_PATH="$(find "${GITHUB_WORKSPACE}/${PATCHES_DIR}" -type f -name "*.patch")"
        if [ -n "${PATCHES_FILE_PATH}" ]; then
            echo "${PATCHES_FILE_PATH}" | while IFS= read -r LINE; do
                patch -d "openwrt" -p1 < "${LINE}"
            done
        else
            echo "No custom patches, using default source code."
        fi
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Refresh the feeds
      id: refresh_feeds
      if: steps.apply_custom_patches.outputs.status == 'success' && !cancelled()
      run: |
        cd "openwrt"
        "./scripts/feeds" update -a
        "./scripts/feeds" install -a
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Download required packages
      id: download_packages
      if: steps.refresh_feeds.outputs.status == 'success' && !cancelled()
      run: |
        cd "openwrt"
        make -j $(nproc) defconfig download
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Compile OpenWrt
      id: compile_openwrt
      if: steps.download_packages.outputs.status == 'success' && !cancelled()
      run: |
        cd "openwrt"
        echo -e "Compiling OpenWrt using $(nproc) thread(s)..."
        make -j $(nproc) || make -j 1 || make -j 1 V=s
        grep '^CONFIG_TARGET.*DEVICE.*=y' ".config" | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check storage usage
      if: steps.compile_openwrt.outputs.status == 'success' && !cancelled()
      run: df -hT

    - name: Organize packages artifact
      id: organize_packages
      if: steps.compile_openwrt.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*/packages
        echo "PACKAGES_DIR=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload packages artifact
      uses: actions/upload-artifact@v3
      if: env.UPLOAD_PACKAGES_ARTIFACT == 'true' && steps.organize_packages.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.PACKAGES_DIR }}

    - name: Organize firmware artifact
      id: organize_firmware
      if: steps.compile_openwrt.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf "packages"
        echo "FIRMWARE_DIR=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v3
      if: env.UPLOAD_FIRMWARE_ARTIFACT == 'true' && steps.organize_firmware.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_DIR }}

    - name: Upload firmware to CowTransfer
      id: upload_to_cowtransfer
      if: steps.organize_firmware.outputs.status == 'success' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL "https://raw.githubusercontent.com/Mikubill/transfer/master/install.sh" | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress "${FIRMWARE}" 2>&1 | tee "cowtransfer.log"
        echo "::warning file=cowtransfer.com::$(cat "cowtransfer.log" | grep https)"
        echo "url=$(cat "cowtransfer.log" | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: upload_to_wetransfer
      if: steps.organize_firmware.outputs.status == 'success' && env.UPLOAD_TO_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL "https://raw.githubusercontent.com/Mikubill/transfer/master/install.sh" | sh
        ./transfer wet -s -p 16 --no-progress "${FIRMWARE}" 2>&1 | tee "wetransfer.log"
        echo "::warning file=wetransfer.com::$(cat "wetransfer.log" | grep https)"
        echo "url=$(cat "wetransfer.log" | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Create a new tag for GitHub releases
      id: create_new_tag
      if: env.UPLOAD_TO_GITHUB_RELEASES == 'true' && steps.organize_firmware.outputs.status == 'success' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch "release.txt"
        echo "Based on \"${REPO_BRANCH}\" in \"${REPO_URL}\"." >> "release.txt"
        [ "${UPLOAD_TO_COWTRANSFER}" = true ] && echo "ðŸ”— [CowTransfer](${{ steps.upload_to_cowtransfer.outputs.url }})" >> "release.txt"
        [ "${UPLOAD_TO_WETRANSFER}" = true ] && echo "ðŸ”— [WeTransfer](${{ steps.upload_to_wetransfer.outputs.url }})" >> "release.txt"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to GitHub releases
      uses: softprops/action-gh-release@v1
      if: steps.create_new_tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_new_tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE_DIR }}/*

    - name: Remove obsolete Workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: ${{ env.MAXIMUM_NUMBER_OF_PRESERVED_ITEMS }}

    - name: Remove obsolete GitHub releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      if: env.UPLOAD_TO_GITHUB_RELEASES == 'true' && !cancelled()
      with:
        keep_latest: ${{ env.MAXIMUM_NUMBER_OF_PRESERVED_ITEMS }}
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
